#!/usr/bin/env node

LOG = console.log.bind(console);

var $0 = process.argv[2],
    $1 = process.argv[3];

function printUsage() {
  LOG('Usage: template [-l|--list] | [TEMPLATE_NAME] [NAME]');
  process.exit(0);
}

function error(message, exit) {
  LOG(message);
  if (exit) {
    process.exit(1);
  }
}

(function() {

  if (!$0) {
    printUsage();
  }

  var fs = require('fs'),
      path = require('path');

  var scriptDir = path.resolve(path.dirname(require.main.filename), '..');
  var resolve = path.resolve.bind(path.resolve);
  var read = function(f) { return fs.readFileSync(f, 'utf8'); };

  var replaceWithArgs = function(s) {
    return s.split('$0').join($0)
            .split('$1').join($1);
  };

  var copyFile = function(a, b) {
    if (fs.existsSync(b)) {
      throw Error();
    }
    fs.writeFileSync(replaceWithArgs(b), read(a).split('__$1').join($1));
  };

  var copyDir = function(a, b) {
    if (!fs.existsSync(a)) {
      error('template: path not found: \'' + a + '\'', 1);
    }
    if (fs.existsSync(b)) {
      error('template: path already exists: \'' + b + '\'', 1);
    }
    if (fs.statSync(a).isDirectory()) {
      fs.mkdirSync(b);
      fs.readdirSync(a).forEach(function(childItemName) {
        copyDir(path.join(a, childItemName),
            path.join(b, childItemName));
      });
    } else {
      copyFile(a, b);
    }
  };

  var templateData = JSON.parse(read(resolve(scriptDir, 'templates.json')));

  if ($0 === '--list' || $0 === '-l') {
    LOG(Object.keys(templateData).sort().join('\n'));
    return 0;
  }

  if ($0 === '-h' || $0 === '--help') {
    printUsage();
  } 

  if (!$1) {
    error('template: output name required: \'template ' + $0 + ' [NAME]\'');
    printUsage();
  }

  function processTemplate(name) {
    scriptDir = path.resolve(scriptDir, 'templates', name);
    fs.readdirSync(scriptDir).forEach(function(e) {
      copyDir(path.join(scriptDir, e), replaceWithArgs(e));
    });
    process.exit(0);
  }

  if (fs.existsSync(path.join(scriptDir, 'templates', $0))) {
    processTemplate($0);
  }

  for (var name in templateData) {
    if (~name.split('|').indexOf($0)) {
      processTemplate(templateData[name]);
    }
  }

  error('template: invalid template name: use --list for a list of valid names', 1);

})();
